server:
  port: 8761

spring:
  application:
    name: eureka-server
  config:
    import: optional:configserver:http://localhost:8888
    activate:
      on-profile: default
  cloud:
    config:
      fail-fast: false            # não impede inicialização caso o config-server esteja fora
      retry:
        max-attempts: 5
        initial-interval: 1000
        multiplier: 1.2
        max-interval: 5000
    loadbalancer:
      cache:
        caffeine:
          spec: maximumSize=10000,expireAfterAccess=10m

eureka:
  client:
    register-with-eureka: false   # o servidor não se registra em si mesmo
    fetch-registry: false         # o servidor não busca registros
    service-url:
      defaultZone: http://localhost:8761/eureka/
  server:
    enable-self-preservation: true
    renewal-threshold-update-interval-ms: 60000
    eviction-interval-timer-in-ms: 60000
    expected-client-renewal-interval-seconds: 30
    response-cache-auto-expiration-in-seconds: 180
    response-cache-update-interval-ms: 3000
    use-read-only-response-cache: true
    wait-time-in-ms-when-sync-empty: 0
    peer-node-read-timeout-ms: 3000
    peer-node-connect-timeout-ms: 3000

  instance:
    hostname: localhost
    lease-renewal-interval-in-seconds: 30
    lease-expiration-duration-in-seconds: 90
    prefer-ip-address: true
    metadata-map:
      instanceId: ${spring.application.name}:${server.port}

management:
  endpoints:
    web:
      exposure:
        include: health, info
  endpoint:
    health:
      show-details: always

logging:
  config: classpath:logback-spring.xml
  level:
    root: INFO
    org.springframework.cloud: INFO
    org.springframework.boot: INFO
    com.netflix.eureka: INFO
    com.netflix.discovery: INFO
